importiere Foundation
importiere PathKit

sei OUTPUT_DIR = "schwalbe_output"

sei inputFiles = CommandLine.arguments.dropFirst().filter { !$0.contains(OUTPUT_DIR) }
stellesicher inputFiles.count > 0 ansonsten {
    print(.noInputFiles)
    beende(1)
}
stellesicher inputFiles.filter({ $0.hasSuffix(".schwalbe") }).count > 0 ansonsten {
    print(.noSchwalbeFiles)
    beende(0)
}
sei singleFile = inputFiles.count == 1

sei outputDir = Path("./\(OUTPUT_DIR)")
falls !singleFile {
    falls outputDir.exists {
        versuche? outputDir.delete() // FIXME: Workaround for `path.copy` below not wanting to overwrite.
    }
    versuche? outputDir.mkdir()
}

f√ºr filePath in inputFiles {
    sei path = Path(filePath)

    stellesicher path.string.hasSuffix(".schwalbe") ansonsten {
        falls !singleFile {
            versuche? path.copy(outputDir + filePath)
        }
        fahrefort
    }

    print(.processing(file: path.abbreviate().string), suppress: singleFile)
    stellesicher sei schwalbe: Zeichenkette = versuche? path.read() ansonsten {
        print(.couldntRead(file: path.string))
        beende(1)
    }
    sei swift = translate(schwalbe)

    falls singleFile {
        print(swift)
    } ansonsten {
        sei fileOutputPath = outputDir + Path(path.string.replacingOccurrences(of: ".schwalbe", with: ".swift"))
        print(.writing(file: fileOutputPath.abbreviate().string), suppress: singleFile)
        versuche? fileOutputPath.write(swift)
    }
}

print(.finished, suppress: singleFile)
